<svg width="296" height="444" viewBox="0 0 296 444" fill="none" xmlns="http://www.w3.org/2000/svg">
	<g filter="url(#filter0_d)">
		<path
			d="M278 134.281C278 96.67 230.226 62.673 230.226 62.673L148 16L65.774 62.673C65.774 62.673 18 96.67 18 134.281V424H278V134.281Z"
			fill="url(#paint0_linear)" fill-opacity="0.49" shape-rendering="crispEdges" />
	</g>
	<defs>
		<filter id="filter0_d" x="0.2" y="0.2" width="295.6" height="443.6" filterUnits="userSpaceOnUse"
			color-interpolation-filters="sRGB">
			<feFlood flood-opacity="0" result="BackgroundImageFix" />
			<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
				result="hardAlpha" />
			<feOffset dy="2" />
			<feGaussianBlur stdDeviation="8.9" />
			<feComposite in2="hardAlpha" operator="out" />
			<feColorMatrix type="matrix" values="0 0 0 0 0.129 0 0 0 0 0.129 0 0 0 0 0.137 0 0 0 0.25 0" />
			<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow" />
			<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape" />
		</filter>
		<linearGradient id="paint0_linear" x1="148" y1="16" x2="148" y2="424" gradientUnits="userSpaceOnUse">
			<stop stop-color="#F14F5A" />
			<stop offset="0.725" stop-color="#F14F5A" stop-opacity="0.795" />
			<stop offset="1" stop-color="#F14F5A" stop-opacity="0" />
		</linearGradient>
	</defs>
	<script>
		// <![CDATA[
		if ('WebSocket' in window) {
			(function () {
				function refreshCSS() {
					const sheets = Array.from(document.getElementsByTagName("link"));
					const head = document.head;
					sheets.forEach(sheet => {
						const parent = sheet.parentElement || head;
						parent.removeChild(sheet);
						if (sheet.href && (!sheet.rel || sheet.rel.toLowerCase() === "stylesheet")) {
							const url = sheet.href.replace(/(&|\?)_cacheOverride=\d+/, '');
							sheet.href = `${url}${url.includes('?') ? '&' : '?'}_cacheOverride=${new Date().valueOf()}`;
						}
						parent.appendChild(sheet);
					});
				}
				const protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
				const address = `${protocol}${window.location.host}${window.location.pathname}/ws`;
				const socket = new WebSocket(address);
				socket.onmessage = msg => {
					if (msg.data === 'reload') window.location.reload();
					else if (msg.data === 'refreshcss') refreshCSS();
				};
				if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
					sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
				}
			})();
		} else {
			console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
		}
		// ]]>
	</script>
</svg>
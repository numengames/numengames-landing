<astro-chat>
  <button id="ia-cta" class="fixed right-4 bottom-4 bg-blue-500 text-white p-4 rounded-full shadow-lg">
    Procyon
  </button>
  <div id="chat-container" class="hidden fixed right-0 bottom-0 m-4 w-80 max-h-96 bg-white shadow-lg rounded-lg flex-col">
    <div class="bg-blue-500 text-white p-4 rounded-t-lg flex justify-between">
      Chat with Procyon
      <span id="ia-close-chat" class="cursor-pointer">x</span>
    </div>
    <div id="chat-content" class="flex-1 p-4 overflow-y-auto" />
    <div class="p-4 bg-gray-100 rounded-b-lg">
      <input
        id="chat-input"
        type="text"
        class="w-full p-2 border rounded-lg"
        placeholder="Type a message..."
      />
    </div>
  </div>
</astro-chat>

<script>
  import { createConversation as apiCreateConversation, handleAssistantMessage } from '@pages/api/partners-integration';
  
  class AstroChat extends HTMLElement {
    conversationId = '';
    
    isChatVisible = false;
    
    messages: Record<string, string>[] = [];
    
    senderTypes = { ai: 'ai', user: 'user' };
    
    constructor() {
      super();
      this.initializeHTMLElements();
    }

    initializeHTMLElements() {
      const cta = this.querySelector('#ia-cta');
      const input = this.querySelector('#chat-input');
      const content = this.querySelector('#chat-content');
      const closeChat = this.querySelector('#ia-close-chat');
      const container = this.querySelector('#chat-container');

      cta && cta.addEventListener('click', this.toggleChat.bind(this, container));
      input && input.addEventListener('keydown', this.handleInputKeyDown.bind(this, content))
      closeChat && closeChat.addEventListener('click', this.toggleChat.bind(this, container));

      content && this.initializeContent(content);
    }

    toggleChat(chatContainer) {
      if (this.isChatVisible) {
        chatContainer.classList.remove('flex');
        chatContainer.classList.add('hidden');
      } else {
        chatContainer.classList.remove('hidden');
        chatContainer.classList.add('flex');
      }

      this.isChatVisible = !this.isChatVisible;
    }

    async handleInputKeyDown(chatContent, event) {
      if (event.key === 'Enter') {
        const message = event.target.value.trim();

        if (message !== '') {
          const content = {
            message,
            sender: this.senderTypes.user,
          }

          this.addMessage(content);
          this.pushChatContent(content, chatContent);

          event.target.value = '';

          if (!this.conversationId) {
            this.conversationId = `web-${Date.now()}`;
            await this.createConversation(this.conversationId);
          }

          const response = await handleAssistantMessage(this.conversationId, message);
          
          const responseContent = {
            message: response,
            sender: this.senderTypes.ai,
          }

          this.addMessage(responseContent);
          this.pushChatContent(responseContent, chatContent);
        }
      }
    }

    async createConversation(conversationId) {
      const params = {
        origin: 'web',
        conversationId,
        type: 'chatgpt',
        name: conversationId,
        assistant: {
          name: 'Procyon',
          id: 'asst_KwCoshgx2q1xDmjNek3YFplT',
        },
      };

      await apiCreateConversation(params);
    };

    initializeContent(chatContent) {
      const content = {
        sender: this.senderTypes.ai,
        message: 'Hello, I\'m Procyon, an AI Assistant. How can I assist you today?',
      }

      this.addMessage(content);
      this.pushChatContent(content, chatContent);
    }

    addMessage({ message, sender }) {
      this.messages.push({ message, sender });
    };

    pushChatContent({ message, sender }, chatContent) {
      const element = document.createElement('div');

      element.textContent = message;
      element.classList.add('p-2', 'my-2', 'rounded-lg', 'shadow-md');

      if (sender === this.senderTypes.ai) {
        element.classList.add('bg-green-100', 'text-right');
      } else if (sender === this.senderTypes.user) {
        element.classList.add('bg-blue-100', 'text-left');
      }

      chatContent.appendChild(element);
    }
  }

  customElements.define('astro-chat', AstroChat);
</script>